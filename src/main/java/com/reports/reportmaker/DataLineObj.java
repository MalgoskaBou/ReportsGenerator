package com.reports.reportmaker;


import java.math.BigDecimal;

/**
 * Represents data from one line in CSV, or node in XML.
 * Generated by {@link ReadFile#readDataFromCSV(String)} and {@link ReadFile#readDataFromXML(String)}
 *
 * Used to unify the output information from read files, for further validation and error identification before writing to the database.
 */

class DataLineObj {

    private String clientID;
    private String requestID;
    private String name;
    private String quantity;
    private String price;
    private String errorIdent;

    /**
     * Constructor
     *
     * @param clientID   ID of client
     * @param requestID  request ID
     * @param name       name of client
     * @param quantity   quantity of product
     * @param price      price of product
     * @param errorIdent identifier of a possible error - contains information about the line being read and the file name
     */
    DataLineObj(String clientID, String requestID, String name, String quantity, String price, String errorIdent) {
        this.clientID = clientID;
        this.requestID = requestID;
        this.name = name;
        this.quantity = quantity;
        this.price = price;
        this.errorIdent = errorIdent;
    }


    /**
     * validation of input data
     * @return returns the object {@link DataModel} if the input data is correct, or null if any exception is detected
     */
    DataModel validateData() {

        try {
            //parse strings to correct formats and delete white-spaces from clientID
            String validateClientID = clientID.replaceAll("\\s", "");
            long validateRequestID = Long.parseLong(requestID);
            int validateQuantity = Integer.parseInt(quantity);

            //save to database as a DECIMAL(7,2)
            BigDecimal validatePrice = new BigDecimal(price);

            //checking if these values are within the varchar range
            if (validateClientID.length() > 6) {
                throw new Exception("too long clientID");
            }
            if (name.length() > 255) {
                throw new Exception("too long name of product");
            }

            return new DataModel(validateClientID, validateRequestID, name, validateQuantity, validatePrice);

        } catch (Exception e) {
            //throw parse exception for wrong format data, and too long value in varChar
            System.out.println(requestID + " probably wrong data format in: " + errorIdent);
            e.printStackTrace();
        }

        return null;
    }
}
