package com.reports.reportmaker;

import java.math.BigDecimal;

/**
 * Represents data from one line in CSV, or node in XML.
 * Generated by {@link ReadFile#readDataFromCSV(String)}
 * and {@link ReadFile#readDataFromXML(String)}
 * <p>
 * Used to unify the output information from read files, for further
 * validation and error identification before writing to the database.
 */

class DataLineObj {

    /**
     * ID of client.
     */
    private String clientID;
    /**
     * Request ID.
     */
    private String requestID;
    /**
     * Name of client.
     */
    private String name;
    /**
     * Quentity od product.
     */
    private String quantity;
    /**
     * Price of product.
     */
    private String price;
    /**
     * identification of a possible error.
     */
    private String errorIdent;

    /**
     * Constructor.
     *
     * @param clientID   ID of client
     * @param requestID  request ID
     * @param name       name of client
     * @param quantity   quantity of product
     * @param price      price of product
     * @param errorIdent identifier of a possible error
     *                   - contains information about the line
     *                   being read and the file name
     */
    DataLineObj(final String clientID,
                final String requestID,
                final String name,
                final String quantity,
                final String price,
                final String errorIdent) {

        this.clientID = clientID;
        this.requestID = requestID;
        this.name = name;
        this.quantity = quantity;
        this.price = price;
        this.errorIdent = errorIdent;
    }


    /**
     * validation of input data.
     *
     * @return returns the object {@link DataModel}
     * if the input data is correct, or null if any exception is detected
     */
    DataModel validateData() {

        try {
            //parse strings to correct formats
            //and delete white-spaces from clientID
            String validateClientID = clientID.replaceAll("\\s", "");
            long validateRequestID = Long.parseLong(requestID);
            int validateQuantity = Integer.parseInt(quantity);

            //save to database as a DECIMAL(7,2)
            BigDecimal validatePrice = new BigDecimal(price);

            //checking if these values are within the varchar range
            if (validateClientID.length() > ConstDataClass.MAX_CHAR_IN_USER_ID) {
                throw new Exception("too long clientID");
            }
            if (name.length() > ConstDataClass.MAX_CHAR_IN_USER_NAME) {
                throw new Exception("too long name of product");
            }

            return new DataModel(validateClientID,
                    validateRequestID,
                    name,
                    validateQuantity,
                    validatePrice);

        } catch (Exception e) {
            //throw parse exception for wrong format data,
            //and too long value in varChar
            System.out.println(requestID + " probably wrong data format in: " + errorIdent);
            e.printStackTrace();
        }

        return null;
    }
}
